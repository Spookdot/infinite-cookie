/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.spook.cookie

import java.util.Random
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.net.URI
import java.net.URL
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.exc.ValueInstantiationException
import javax.swing.JFrame
import javax.swing.JLabel
import javax.swing.ImageIcon
import javax.imageio.ImageIO
import java.awt.EventQueue
import java.awt.image.BufferedImage
import java.awt.Image

const val UNSPLASH_ACCESS_KEY: String = ""

fun main() {
    val client = HttpClient.newHttpClient()

    val randomGenerator = Random()
    val pageNumber = randomGenerator.nextInt(1, 50)
    val imageNumber = randomGenerator.nextInt(10)

    val response = client.send(
        HttpRequest.newBuilder(
                URI("https://api.unsplash.com/search/photos?query=cookies&page=" + pageNumber.toString())
            ).setHeader(
                "Authorization",
                "Client-ID " + UNSPLASH_ACCESS_KEY
            ).build(),
        HttpResponse.BodyHandlers.ofString()
    ).body()

    val cookieData = ObjectMapper().readValue(response, CookieResponse::class.java)
    if (cookieData.results == null) {
        println(cookieData.errors?.get(0) ?: "There were no results but somehow still an error")
        return
    }

    val img = ImageIO.read(URL(cookieData.results[imageNumber].urls.regular))
    EventQueue.invokeLater(Runnable {
        val frame = MainWindow("Cookie", img)
        frame.isVisible = true
    })
}

private fun BufferedImage.getScaledInstanceWithRatio(width: Int, height: Int, hints: Int): Image {
    if (this.height > this.width) {
        return this.getScaledInstance(-1, height, hints)
    }
    else {
        return this.getScaledInstance(width, -1, hints)
    }
}

class MainWindow(title: String, img: BufferedImage) : JFrame() {
    init {
        createUI(title, img)
    }
    
    private fun createUI(title: String, img: BufferedImage) {
        setTitle(title)

        val imageIcon = ImageIcon(img.getScaledInstanceWithRatio(1024, 1024, Image.SCALE_DEFAULT))
        val picture = JLabel(imageIcon)
        add(picture)

        defaultCloseOperation = JFrame.EXIT_ON_CLOSE
        setSize(
            imageIcon.iconWidth,
            imageIcon.iconHeight
        )
        setLocationRelativeTo(null)
    }
}

@JsonIgnoreProperties(ignoreUnknown = true)
data class CookieResponse(
    @JsonProperty("results") val results: List<CookieImage>?,
    @JsonProperty("errors") val errors: List<String>?
)

@JsonIgnoreProperties(ignoreUnknown = true)
data class CookieImage(@JsonProperty("urls") val urls: CookieImageUrls)

@JsonIgnoreProperties(ignoreUnknown = true)
data class CookieImageUrls(@JsonProperty("regular") val regular: String)